// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_fungible
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-30, STEPS: `50`, REPEAT: 80, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/unique-collator
// benchmark
// pallet
// --pallet
// pallet-fungible
// --wasm-execution
// compiled
// --extrinsic
// *
// --template=.maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/fungible/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_fungible.
pub trait WeightInfo {
	fn create_item() -> Weight;
	fn create_multiple_items_ex(b: u32, ) -> Weight;
	fn burn_item() -> Weight;
	fn transfer() -> Weight;
	fn approve() -> Weight;
	fn approve_from() -> Weight;
	fn transfer_from() -> Weight;
	fn burn_from() -> Weight;
}

/// Weights for pallet_fungible using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Fungible TotalSupply (r:1 w:1)
	/// Proof: Fungible TotalSupply (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	/// Storage: Fungible Balance (r:1 w:1)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn create_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `5055`
		// Minimum execution time: 10_152_000 picoseconds.
		Weight::from_parts(10_520_000, 5055)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Fungible TotalSupply (r:1 w:1)
	/// Proof: Fungible TotalSupply (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	/// Storage: Fungible Balance (r:200 w:200)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `2503 + b * (2552 ±0)`
		// Minimum execution time: 3_437_000 picoseconds.
		Weight::from_parts(13_322_752, 2503)
			// Standard Error: 1_728
			.saturating_add(Weight::from_parts(3_605_522, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2552).saturating_mul(b.into()))
	}
	/// Storage: Fungible TotalSupply (r:1 w:1)
	/// Proof: Fungible TotalSupply (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	/// Storage: Fungible Balance (r:1 w:1)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn burn_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `197`
		//  Estimated: `5055`
		// Minimum execution time: 12_894_000 picoseconds.
		Weight::from_parts(13_347_000, 5055)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Fungible Balance (r:2 w:2)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `5104`
		// Minimum execution time: 13_832_000 picoseconds.
		Weight::from_parts(14_064_000, 5104)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Fungible Balance (r:1 w:0)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Fungible Allowance (r:0 w:1)
	/// Proof: Fungible Allowance (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `2552`
		// Minimum execution time: 12_417_000 picoseconds.
		Weight::from_parts(12_658_000, 2552)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Fungible Balance (r:1 w:0)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Fungible Allowance (r:0 w:1)
	/// Proof: Fungible Allowance (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
	fn approve_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `2552`
		// Minimum execution time: 12_322_000 picoseconds.
		Weight::from_parts(12_629_000, 2552)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Fungible Allowance (r:1 w:1)
	/// Proof: Fungible Allowance (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
	/// Storage: Fungible Balance (r:2 w:2)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn transfer_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `300`
		//  Estimated: `7672`
		// Minimum execution time: 21_667_000 picoseconds.
		Weight::from_parts(22_166_000, 7672)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Fungible Allowance (r:1 w:1)
	/// Proof: Fungible Allowance (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
	/// Storage: Fungible TotalSupply (r:1 w:1)
	/// Proof: Fungible TotalSupply (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	/// Storage: Fungible Balance (r:1 w:1)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn burn_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `315`
		//  Estimated: `7623`
		// Minimum execution time: 21_271_000 picoseconds.
		Weight::from_parts(21_709_000, 7623)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Fungible TotalSupply (r:1 w:1)
	/// Proof: Fungible TotalSupply (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	/// Storage: Fungible Balance (r:1 w:1)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn create_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `5055`
		// Minimum execution time: 10_152_000 picoseconds.
		Weight::from_parts(10_520_000, 5055)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Fungible TotalSupply (r:1 w:1)
	/// Proof: Fungible TotalSupply (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	/// Storage: Fungible Balance (r:200 w:200)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `2503 + b * (2552 ±0)`
		// Minimum execution time: 3_437_000 picoseconds.
		Weight::from_parts(13_322_752, 2503)
			// Standard Error: 1_728
			.saturating_add(Weight::from_parts(3_605_522, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2552).saturating_mul(b.into()))
	}
	/// Storage: Fungible TotalSupply (r:1 w:1)
	/// Proof: Fungible TotalSupply (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	/// Storage: Fungible Balance (r:1 w:1)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn burn_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `197`
		//  Estimated: `5055`
		// Minimum execution time: 12_894_000 picoseconds.
		Weight::from_parts(13_347_000, 5055)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Fungible Balance (r:2 w:2)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `5104`
		// Minimum execution time: 13_832_000 picoseconds.
		Weight::from_parts(14_064_000, 5104)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Fungible Balance (r:1 w:0)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Fungible Allowance (r:0 w:1)
	/// Proof: Fungible Allowance (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `2552`
		// Minimum execution time: 12_417_000 picoseconds.
		Weight::from_parts(12_658_000, 2552)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Fungible Balance (r:1 w:0)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Fungible Allowance (r:0 w:1)
	/// Proof: Fungible Allowance (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
	fn approve_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `2552`
		// Minimum execution time: 12_322_000 picoseconds.
		Weight::from_parts(12_629_000, 2552)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Fungible Allowance (r:1 w:1)
	/// Proof: Fungible Allowance (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
	/// Storage: Fungible Balance (r:2 w:2)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn transfer_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `300`
		//  Estimated: `7672`
		// Minimum execution time: 21_667_000 picoseconds.
		Weight::from_parts(22_166_000, 7672)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Fungible Allowance (r:1 w:1)
	/// Proof: Fungible Allowance (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
	/// Storage: Fungible TotalSupply (r:1 w:1)
	/// Proof: Fungible TotalSupply (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	/// Storage: Fungible Balance (r:1 w:1)
	/// Proof: Fungible Balance (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn burn_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `315`
		//  Estimated: `7623`
		// Minimum execution time: 21_271_000 picoseconds.
		Weight::from_parts(21_709_000, 7623)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}

