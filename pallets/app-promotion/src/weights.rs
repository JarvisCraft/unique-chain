// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_app_promotion
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-15, STEPS: `50`, REPEAT: 80, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/unique-collator
// benchmark
// pallet
// --pallet
// pallet-app-promotion
// --wasm-execution
// compiled
// --extrinsic
// *
// --template
// .maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/app-promotion/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_app_promotion.
pub trait WeightInfo {
	fn on_initialize(b: u32, ) -> Weight;
	fn set_admin_address() -> Weight;
	fn payout_stakers(b: u32, ) -> Weight;
	fn stake() -> Weight;
	fn unstake_all() -> Weight;
	fn unstake_partial() -> Weight;
	fn sponsor_collection() -> Weight;
	fn stop_sponsoring_collection() -> Weight;
	fn sponsor_contract() -> Weight;
	fn stop_sponsoring_contract() -> Weight;
}

/// Weights for pallet_app_promotion using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: AppPromotion PendingUnstake (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn on_initialize(b: u32, ) -> Weight {
		Weight::from_ref_time(2_592_346 as u64)
			// Standard Error: 23_629
			.saturating_add(Weight::from_ref_time(7_523_802 as u64).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(b as u64)))
	}
	// Storage: AppPromotion Admin (r:0 w:1)
	fn set_admin_address() -> Weight {
		Weight::from_ref_time(6_209_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AppPromotion Admin (r:1 w:0)
	// Storage: Configuration AppPromomotionConfigurationOverride (r:1 w:0)
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Storage: AppPromotion PreviousCalculatedRecord (r:1 w:1)
	// Storage: AppPromotion Staked (r:11 w:10)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: AppPromotion TotalStaked (r:1 w:1)
	fn payout_stakers(b: u32, ) -> Weight {
		Weight::from_ref_time(64_917_000 as u64)
			// Standard Error: 34_206
			.saturating_add(Weight::from_ref_time(51_518_500 as u64).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().reads((12 as u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((12 as u64).saturating_mul(b as u64)))
	}
	// Storage: AppPromotion StakesPerAccount (r:1 w:1)
	// Storage: Configuration AppPromomotionConfigurationOverride (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Storage: AppPromotion Staked (r:1 w:1)
	// Storage: AppPromotion TotalStaked (r:1 w:1)
	fn stake() -> Weight {
		Weight::from_ref_time(18_208_000 as u64)
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Configuration AppPromomotionConfigurationOverride (r:1 w:0)
	// Storage: AppPromotion PendingUnstake (r:1 w:1)
	// Storage: AppPromotion Staked (r:11 w:10)
	// Storage: AppPromotion TotalStaked (r:1 w:1)
	// Storage: AppPromotion StakesPerAccount (r:0 w:1)
	fn unstake_all() -> Weight {
		Weight::from_ref_time(45_018_000 as u64)
			.saturating_add(T::DbWeight::get().reads(14 as u64))
			.saturating_add(T::DbWeight::get().writes(13 as u64))
	}
	// Storage: Configuration AppPromomotionConfigurationOverride (r:1 w:0)
	// Storage: AppPromotion PendingUnstake (r:1 w:1)
	// Storage: AppPromotion Staked (r:11 w:10)
	// Storage: AppPromotion TotalStaked (r:1 w:1)
	// Storage: AppPromotion StakesPerAccount (r:1 w:1)
	fn unstake_partial() -> Weight {
		Weight::from_ref_time(49_066_000 as u64)
			.saturating_add(T::DbWeight::get().reads(15 as u64))
			.saturating_add(T::DbWeight::get().writes(13 as u64))
	}
	// Storage: AppPromotion Admin (r:1 w:0)
	// Storage: Common CollectionById (r:1 w:1)
	fn sponsor_collection() -> Weight {
		Weight::from_ref_time(15_039_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AppPromotion Admin (r:1 w:0)
	// Storage: Common CollectionById (r:1 w:1)
	fn stop_sponsoring_collection() -> Weight {
		Weight::from_ref_time(14_692_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AppPromotion Admin (r:1 w:0)
	// Storage: EvmContractHelpers Sponsoring (r:0 w:1)
	fn sponsor_contract() -> Weight {
		Weight::from_ref_time(11_810_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AppPromotion Admin (r:1 w:0)
	// Storage: EvmContractHelpers Sponsoring (r:1 w:1)
	fn stop_sponsoring_contract() -> Weight {
		Weight::from_ref_time(13_570_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: AppPromotion PendingUnstake (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn on_initialize(b: u32, ) -> Weight {
		Weight::from_ref_time(2_592_346 as u64)
			// Standard Error: 23_629
			.saturating_add(Weight::from_ref_time(7_523_802 as u64).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(b as u64)))
			.saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(b as u64)))
	}
	// Storage: AppPromotion Admin (r:0 w:1)
	fn set_admin_address() -> Weight {
		Weight::from_ref_time(6_209_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AppPromotion Admin (r:1 w:0)
	// Storage: Configuration AppPromomotionConfigurationOverride (r:1 w:0)
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Storage: AppPromotion PreviousCalculatedRecord (r:1 w:1)
	// Storage: AppPromotion Staked (r:11 w:10)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: AppPromotion TotalStaked (r:1 w:1)
	fn payout_stakers(b: u32, ) -> Weight {
		Weight::from_ref_time(64_917_000 as u64)
			// Standard Error: 34_206
			.saturating_add(Weight::from_ref_time(51_518_500 as u64).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().reads((12 as u64).saturating_mul(b as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((12 as u64).saturating_mul(b as u64)))
	}
	// Storage: AppPromotion StakesPerAccount (r:1 w:1)
	// Storage: Configuration AppPromomotionConfigurationOverride (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Storage: AppPromotion Staked (r:1 w:1)
	// Storage: AppPromotion TotalStaked (r:1 w:1)
	fn stake() -> Weight {
		Weight::from_ref_time(18_208_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: Configuration AppPromomotionConfigurationOverride (r:1 w:0)
	// Storage: AppPromotion PendingUnstake (r:1 w:1)
	// Storage: AppPromotion Staked (r:11 w:10)
	// Storage: AppPromotion TotalStaked (r:1 w:1)
	// Storage: AppPromotion StakesPerAccount (r:0 w:1)
	fn unstake_all() -> Weight {
		Weight::from_ref_time(45_018_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(14 as u64))
			.saturating_add(RocksDbWeight::get().writes(13 as u64))
	}
	// Storage: Configuration AppPromomotionConfigurationOverride (r:1 w:0)
	// Storage: AppPromotion PendingUnstake (r:1 w:1)
	// Storage: AppPromotion Staked (r:11 w:10)
	// Storage: AppPromotion TotalStaked (r:1 w:1)
	// Storage: AppPromotion StakesPerAccount (r:1 w:1)
	fn unstake_partial() -> Weight {
		Weight::from_ref_time(49_066_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(15 as u64))
			.saturating_add(RocksDbWeight::get().writes(13 as u64))
	}
	// Storage: AppPromotion Admin (r:1 w:0)
	// Storage: Common CollectionById (r:1 w:1)
	fn sponsor_collection() -> Weight {
		Weight::from_ref_time(15_039_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AppPromotion Admin (r:1 w:0)
	// Storage: Common CollectionById (r:1 w:1)
	fn stop_sponsoring_collection() -> Weight {
		Weight::from_ref_time(14_692_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AppPromotion Admin (r:1 w:0)
	// Storage: EvmContractHelpers Sponsoring (r:0 w:1)
	fn sponsor_contract() -> Weight {
		Weight::from_ref_time(11_810_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AppPromotion Admin (r:1 w:0)
	// Storage: EvmContractHelpers Sponsoring (r:1 w:1)
	fn stop_sponsoring_contract() -> Weight {
		Weight::from_ref_time(13_570_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}
