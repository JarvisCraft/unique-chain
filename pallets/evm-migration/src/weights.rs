// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_evm_migration
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-30, STEPS: `50`, REPEAT: 80, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/unique-collator
// benchmark
// pallet
// --pallet
// pallet-evm-migration
// --wasm-execution
// compiled
// --extrinsic
// *
// --template=.maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/evm-migration/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_evm_migration.
pub trait WeightInfo {
	fn begin() -> Weight;
	fn set_data(b: u32, ) -> Weight;
	fn finish(b: u32, ) -> Weight;
	fn insert_eth_logs(b: u32, ) -> Weight;
	fn insert_events(b: u32, ) -> Weight;
}

/// Weights for pallet_evm_migration using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: EvmMigration MigrationPending (r:1 w:1)
	/// Proof: EvmMigration MigrationPending (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: EVM AccountCodes (r:1 w:0)
	/// Proof Skipped: EVM AccountCodes (max_values: None, max_size: None, mode: Measured)
	fn begin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `94`
		//  Estimated: `7676`
		// Minimum execution time: 12_699_000 picoseconds.
		Weight::from_parts(12_989_000, 7676)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: EvmMigration MigrationPending (r:1 w:0)
	/// Proof: EvmMigration MigrationPending (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: EVM AccountStorages (r:0 w:80)
	/// Proof Skipped: EVM AccountStorages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[0, 80]`.
	fn set_data(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `2600`
		// Minimum execution time: 9_157_000 picoseconds.
		Weight::from_parts(7_442_065, 2600)
			// Standard Error: 1_138
			.saturating_add(Weight::from_parts(934_789, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
	}
	/// Storage: EvmMigration MigrationPending (r:1 w:1)
	/// Proof: EvmMigration MigrationPending (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: EVM AccountCodes (r:0 w:1)
	/// Proof Skipped: EVM AccountCodes (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[0, 80]`.
	fn finish(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `2600`
		// Minimum execution time: 7_719_000 picoseconds.
		Weight::from_parts(8_237_929, 2600)
			// Standard Error: 266
			.saturating_add(Weight::from_parts(3_473, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// The range of component `b` is `[0, 200]`.
	fn insert_eth_logs(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_193_000 picoseconds.
		Weight::from_parts(2_667_314, 0)
			// Standard Error: 583
			.saturating_add(Weight::from_parts(690_704, 0).saturating_mul(b.into()))
	}
	/// The range of component `b` is `[0, 200]`.
	fn insert_events(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_253_000 picoseconds.
		Weight::from_parts(4_685_069, 0)
			// Standard Error: 1_036
			.saturating_add(Weight::from_parts(1_322_329, 0).saturating_mul(b.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: EvmMigration MigrationPending (r:1 w:1)
	/// Proof: EvmMigration MigrationPending (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: EVM AccountCodes (r:1 w:0)
	/// Proof Skipped: EVM AccountCodes (max_values: None, max_size: None, mode: Measured)
	fn begin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `94`
		//  Estimated: `7676`
		// Minimum execution time: 12_699_000 picoseconds.
		Weight::from_parts(12_989_000, 7676)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: EvmMigration MigrationPending (r:1 w:0)
	/// Proof: EvmMigration MigrationPending (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: EVM AccountStorages (r:0 w:80)
	/// Proof Skipped: EVM AccountStorages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[0, 80]`.
	fn set_data(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `2600`
		// Minimum execution time: 9_157_000 picoseconds.
		Weight::from_parts(7_442_065, 2600)
			// Standard Error: 1_138
			.saturating_add(Weight::from_parts(934_789, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(b.into())))
	}
	/// Storage: EvmMigration MigrationPending (r:1 w:1)
	/// Proof: EvmMigration MigrationPending (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: EVM AccountCodes (r:0 w:1)
	/// Proof Skipped: EVM AccountCodes (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[0, 80]`.
	fn finish(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `2600`
		// Minimum execution time: 7_719_000 picoseconds.
		Weight::from_parts(8_237_929, 2600)
			// Standard Error: 266
			.saturating_add(Weight::from_parts(3_473, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// The range of component `b` is `[0, 200]`.
	fn insert_eth_logs(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_193_000 picoseconds.
		Weight::from_parts(2_667_314, 0)
			// Standard Error: 583
			.saturating_add(Weight::from_parts(690_704, 0).saturating_mul(b.into()))
	}
	/// The range of component `b` is `[0, 200]`.
	fn insert_events(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_253_000 picoseconds.
		Weight::from_parts(4_685_069, 0)
			// Standard Error: 1_036
			.saturating_add(Weight::from_parts(1_322_329, 0).saturating_mul(b.into()))
	}
}

