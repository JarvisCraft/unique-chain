// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_refungible
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-30, STEPS: `50`, REPEAT: 80, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/unique-collator
// benchmark
// pallet
// --pallet
// pallet-refungible
// --wasm-execution
// compiled
// --extrinsic
// *
// --template=.maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/refungible/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_refungible.
pub trait WeightInfo {
	fn create_item() -> Weight;
	fn create_multiple_items(b: u32, ) -> Weight;
	fn create_multiple_items_ex_multiple_items(b: u32, ) -> Weight;
	fn create_multiple_items_ex_multiple_owners(b: u32, ) -> Weight;
	fn burn_item_partial() -> Weight;
	fn burn_item_fully() -> Weight;
	fn transfer_normal() -> Weight;
	fn transfer_creating() -> Weight;
	fn transfer_removing() -> Weight;
	fn transfer_creating_removing() -> Weight;
	fn approve() -> Weight;
	fn approve_from() -> Weight;
	fn transfer_from_normal() -> Weight;
	fn transfer_from_creating() -> Weight;
	fn transfer_from_removing() -> Weight;
	fn transfer_from_creating_removing() -> Weight;
	fn burn_from() -> Weight;
	fn set_token_property_permissions(b: u32, ) -> Weight;
	fn set_token_properties(b: u32, ) -> Weight;
	fn delete_token_properties(b: u32, ) -> Weight;
	fn repartition_item() -> Weight;
	fn token_owner() -> Weight;
	fn set_allowance_for_all() -> Weight;
	fn allowance_for_all() -> Weight;
	fn repair_item() -> Weight;
}

/// Weights for pallet_refungible using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn create_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `59511`
		// Minimum execution time: 25_287_000 picoseconds.
		Weight::from_parts(25_741_000, 59511)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:200 w:200)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:200)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `24232 + b * (35279 ±0)`
		// Minimum execution time: 4_618_000 picoseconds.
		Weight::from_parts(1_425_218, 24232)
			// Standard Error: 4_343
			.saturating_add(Weight::from_parts(9_154_733, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 35279).saturating_mul(b.into()))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:200 w:200)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:200 w:200)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:200)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `21692 + b * (37819 ±0)`
		// Minimum execution time: 4_063_000 picoseconds.
		Weight::from_parts(4_160_000, 21692)
			// Standard Error: 2_386
			.saturating_add(Weight::from_parts(10_836_802, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((5_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 37819).saturating_mul(b.into()))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:200 w:200)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex_multiple_owners(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `56971 + b * (2540 ±0)`
		// Minimum execution time: 14_637_000 picoseconds.
		Weight::from_parts(19_042_423, 56971)
			// Standard Error: 1_632
			.saturating_add(Weight::from_parts(5_976_694, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: Refungible Balance (r:3 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn burn_item_partial() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490`
		//  Estimated: `12747`
		// Minimum execution time: 35_018_000 picoseconds.
		Weight::from_parts(35_596_000, 12747)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokensBurnt (r:1 w:1)
	/// Proof: Refungible TokensBurnt (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn burn_item_fully() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375`
		//  Estimated: `10110`
		// Minimum execution time: 30_441_000 picoseconds.
		Weight::from_parts(31_000_000, 10110)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	fn transfer_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `398`
		//  Estimated: `7643`
		// Minimum execution time: 20_055_000 picoseconds.
		Weight::from_parts(20_533_000, 7643)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375`
		//  Estimated: `10183`
		// Minimum execution time: 23_443_000 picoseconds.
		Weight::from_parts(23_791_000, 10183)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490`
		//  Estimated: `10183`
		// Minimum execution time: 26_489_000 picoseconds.
		Weight::from_parts(27_103_000, 10183)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:2 w:2)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:2)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375`
		//  Estimated: `12723`
		// Minimum execution time: 26_719_000 picoseconds.
		Weight::from_parts(27_038_000, 12723)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible Balance (r:1 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible Allowance (r:0 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `256`
		//  Estimated: `2564`
		// Minimum execution time: 12_949_000 picoseconds.
		Weight::from_parts(13_181_000, 2564)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible Balance (r:1 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible Allowance (r:0 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	fn approve_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `2564`
		// Minimum execution time: 12_942_000 picoseconds.
		Weight::from_parts(13_268_000, 2564)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	fn transfer_from_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `10223`
		// Minimum execution time: 28_907_000 picoseconds.
		Weight::from_parts(29_487_000, 10223)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `12763`
		// Minimum execution time: 31_271_000 picoseconds.
		Weight::from_parts(32_293_000, 12763)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `620`
		//  Estimated: `12763`
		// Minimum execution time: 34_295_000 picoseconds.
		Weight::from_parts(34_924_000, 12763)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:2 w:2)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:2)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `15303`
		// Minimum execution time: 35_447_000 picoseconds.
		Weight::from_parts(35_896_000, 15303)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokensBurnt (r:1 w:1)
	/// Proof: Refungible TokensBurnt (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn burn_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `12690`
		// Minimum execution time: 39_395_000 picoseconds.
		Weight::from_parts(40_119_000, 12690)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Common CollectionPropertyPermissions (r:1 w:1)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_property_permissions(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `281`
		//  Estimated: `19201`
		// Minimum execution time: 2_337_000 picoseconds.
		Weight::from_parts(2_434_000, 19201)
			// Standard Error: 43_425
			.saturating_add(Weight::from_parts(12_286_502, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490 + b * (261 ±0)`
		//  Estimated: `54480`
		// Minimum execution time: 11_857_000 picoseconds.
		Weight::from_parts(12_007_000, 54480)
			// Standard Error: 22_963
			.saturating_add(Weight::from_parts(6_609_180, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn delete_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `527 + b * (33291 ±0)`
		//  Estimated: `54480`
		// Minimum execution time: 12_001_000 picoseconds.
		Weight::from_parts(12_197_000, 54480)
			// Standard Error: 70_580
			.saturating_add(Weight::from_parts(21_847_004, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	fn repartition_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `321`
		//  Estimated: `5079`
		// Minimum execution time: 14_497_000 picoseconds.
		Weight::from_parts(14_825_000, 5079)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Refungible Balance (r:2 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	fn token_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `321`
		//  Estimated: `5128`
		// Minimum execution time: 8_888_000 picoseconds.
		Weight::from_parts(9_373_000, 5128)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Refungible CollectionAllowance (r:0 w:1)
	/// Proof: Refungible CollectionAllowance (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	fn set_allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_042_000 picoseconds.
		Weight::from_parts(7_245_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible CollectionAllowance (r:1 w:0)
	/// Proof: Refungible CollectionAllowance (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	fn allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2586`
		// Minimum execution time: 3_425_000 picoseconds.
		Weight::from_parts(3_554_000, 2586)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn repair_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174`
		//  Estimated: `35279`
		// Minimum execution time: 4_684_000 picoseconds.
		Weight::from_parts(4_805_000, 35279)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn create_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `59511`
		// Minimum execution time: 25_287_000 picoseconds.
		Weight::from_parts(25_741_000, 59511)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:200 w:200)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:200)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `24232 + b * (35279 ±0)`
		// Minimum execution time: 4_618_000 picoseconds.
		Weight::from_parts(1_425_218, 24232)
			// Standard Error: 4_343
			.saturating_add(Weight::from_parts(9_154_733, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 35279).saturating_mul(b.into()))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:200 w:200)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:200 w:200)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:200)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `21692 + b * (37819 ±0)`
		// Minimum execution time: 4_063_000 picoseconds.
		Weight::from_parts(4_160_000, 21692)
			// Standard Error: 2_386
			.saturating_add(Weight::from_parts(10_836_802, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((5_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 37819).saturating_mul(b.into()))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:200 w:200)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex_multiple_owners(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `56971 + b * (2540 ±0)`
		// Minimum execution time: 14_637_000 picoseconds.
		Weight::from_parts(19_042_423, 56971)
			// Standard Error: 1_632
			.saturating_add(Weight::from_parts(5_976_694, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: Refungible Balance (r:3 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn burn_item_partial() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490`
		//  Estimated: `12747`
		// Minimum execution time: 35_018_000 picoseconds.
		Weight::from_parts(35_596_000, 12747)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokensBurnt (r:1 w:1)
	/// Proof: Refungible TokensBurnt (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn burn_item_fully() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375`
		//  Estimated: `10110`
		// Minimum execution time: 30_441_000 picoseconds.
		Weight::from_parts(31_000_000, 10110)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	fn transfer_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `398`
		//  Estimated: `7643`
		// Minimum execution time: 20_055_000 picoseconds.
		Weight::from_parts(20_533_000, 7643)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375`
		//  Estimated: `10183`
		// Minimum execution time: 23_443_000 picoseconds.
		Weight::from_parts(23_791_000, 10183)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490`
		//  Estimated: `10183`
		// Minimum execution time: 26_489_000 picoseconds.
		Weight::from_parts(27_103_000, 10183)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:2 w:2)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:2)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375`
		//  Estimated: `12723`
		// Minimum execution time: 26_719_000 picoseconds.
		Weight::from_parts(27_038_000, 12723)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible Balance (r:1 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible Allowance (r:0 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `256`
		//  Estimated: `2564`
		// Minimum execution time: 12_949_000 picoseconds.
		Weight::from_parts(13_181_000, 2564)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible Balance (r:1 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible Allowance (r:0 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	fn approve_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `2564`
		// Minimum execution time: 12_942_000 picoseconds.
		Weight::from_parts(13_268_000, 2564)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	fn transfer_from_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `10223`
		// Minimum execution time: 28_907_000 picoseconds.
		Weight::from_parts(29_487_000, 10223)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `12763`
		// Minimum execution time: 31_271_000 picoseconds.
		Weight::from_parts(32_293_000, 12763)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `620`
		//  Estimated: `12763`
		// Minimum execution time: 34_295_000 picoseconds.
		Weight::from_parts(34_924_000, 12763)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:2 w:2)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:2)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `15303`
		// Minimum execution time: 35_447_000 picoseconds.
		Weight::from_parts(35_896_000, 15303)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokensBurnt (r:1 w:1)
	/// Proof: Refungible TokensBurnt (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn burn_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `12690`
		// Minimum execution time: 39_395_000 picoseconds.
		Weight::from_parts(40_119_000, 12690)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Common CollectionPropertyPermissions (r:1 w:1)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_property_permissions(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `281`
		//  Estimated: `19201`
		// Minimum execution time: 2_337_000 picoseconds.
		Weight::from_parts(2_434_000, 19201)
			// Standard Error: 43_425
			.saturating_add(Weight::from_parts(12_286_502, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490 + b * (261 ±0)`
		//  Estimated: `54480`
		// Minimum execution time: 11_857_000 picoseconds.
		Weight::from_parts(12_007_000, 54480)
			// Standard Error: 22_963
			.saturating_add(Weight::from_parts(6_609_180, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn delete_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `527 + b * (33291 ±0)`
		//  Estimated: `54480`
		// Minimum execution time: 12_001_000 picoseconds.
		Weight::from_parts(12_197_000, 54480)
			// Standard Error: 70_580
			.saturating_add(Weight::from_parts(21_847_004, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	fn repartition_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `321`
		//  Estimated: `5079`
		// Minimum execution time: 14_497_000 picoseconds.
		Weight::from_parts(14_825_000, 5079)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Refungible Balance (r:2 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	fn token_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `321`
		//  Estimated: `5128`
		// Minimum execution time: 8_888_000 picoseconds.
		Weight::from_parts(9_373_000, 5128)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Refungible CollectionAllowance (r:0 w:1)
	/// Proof: Refungible CollectionAllowance (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	fn set_allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_042_000 picoseconds.
		Weight::from_parts(7_245_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible CollectionAllowance (r:1 w:0)
	/// Proof: Refungible CollectionAllowance (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	fn allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2586`
		// Minimum execution time: 3_425_000 picoseconds.
		Weight::from_parts(3_554_000, 2586)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn repair_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174`
		//  Estimated: `35279`
		// Minimum execution time: 4_684_000 picoseconds.
		Weight::from_parts(4_805_000, 35279)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

