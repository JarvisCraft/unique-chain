// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_refungible
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-26, STEPS: `50`, REPEAT: `400`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bench-host`, CPU: `Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/production/unique-collator
// benchmark
// pallet
// --pallet
// pallet-refungible
// --wasm-execution
// compiled
// --extrinsic
// *
// --template=.maintain/frame-weight-template.hbs
// --steps=50
// --repeat=400
// --heap-pages=4096
// --output=./pallets/refungible/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_refungible.
pub trait WeightInfo {
	fn create_item() -> Weight;
	fn create_multiple_items(b: u32, ) -> Weight;
	fn create_multiple_items_ex_multiple_items(b: u32, ) -> Weight;
	fn create_multiple_items_ex_multiple_owners(b: u32, ) -> Weight;
	fn burn_item_partial() -> Weight;
	fn burn_item_fully() -> Weight;
	fn transfer_normal() -> Weight;
	fn transfer_creating() -> Weight;
	fn transfer_removing() -> Weight;
	fn transfer_creating_removing() -> Weight;
	fn approve() -> Weight;
	fn approve_from() -> Weight;
	fn transfer_from_normal() -> Weight;
	fn transfer_from_creating() -> Weight;
	fn transfer_from_removing() -> Weight;
	fn transfer_from_creating_removing() -> Weight;
	fn burn_from() -> Weight;
	fn set_token_property_permissions(b: u32, ) -> Weight;
	fn set_token_properties(b: u32, ) -> Weight;
	fn reset_token_properties(b: u32, ) -> Weight;
	fn delete_token_properties(b: u32, ) -> Weight;
	fn repartition_item() -> Weight;
	fn token_owner() -> Weight;
	fn set_allowance_for_all() -> Weight;
	fn allowance_for_all() -> Weight;
	fn repair_item() -> Weight;
}

/// Weights for pallet_refungible using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn create_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3530`
		// Minimum execution time: 12_168_000 picoseconds.
		Weight::from_parts(12_531_000, 3530)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:200)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3530`
		// Minimum execution time: 2_583_000 picoseconds.
		Weight::from_parts(2_726_000, 3530)
			// Standard Error: 1_051
			.saturating_add(Weight::from_parts(4_727_433, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(b.into())))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:200 w:200)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:200)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3481 + b * (2540 ±0)`
		// Minimum execution time: 2_565_000 picoseconds.
		Weight::from_parts(2_710_000, 3481)
			// Standard Error: 862
			.saturating_add(Weight::from_parts(5_951_711, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:200 w:200)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex_multiple_owners(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3481 + b * (2540 ±0)`
		// Minimum execution time: 4_281_000 picoseconds.
		Weight::from_parts(3_252_037, 3481)
			// Standard Error: 568
			.saturating_add(Weight::from_parts(4_380_356, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: Refungible Balance (r:3 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn burn_item_partial() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `456`
		//  Estimated: `8682`
		// Minimum execution time: 22_354_000 picoseconds.
		Weight::from_parts(22_787_000, 8682)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokensBurnt (r:1 w:1)
	/// Proof: Refungible TokensBurnt (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn burn_item_fully() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `3554`
		// Minimum execution time: 21_689_000 picoseconds.
		Weight::from_parts(22_199_000, 3554)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	fn transfer_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `365`
		//  Estimated: `6118`
		// Minimum execution time: 13_673_000 picoseconds.
		Weight::from_parts(14_067_000, 6118)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `6118`
		// Minimum execution time: 15_863_000 picoseconds.
		Weight::from_parts(16_197_000, 6118)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `456`
		//  Estimated: `6118`
		// Minimum execution time: 18_123_000 picoseconds.
		Weight::from_parts(18_501_000, 6118)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:2 w:2)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:2)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `6118`
		// Minimum execution time: 17_966_000 picoseconds.
		Weight::from_parts(18_305_000, 6118)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible Balance (r:1 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible Allowance (r:0 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `223`
		//  Estimated: `3554`
		// Minimum execution time: 8_636_000 picoseconds.
		Weight::from_parts(8_882_000, 3554)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible Balance (r:1 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible Allowance (r:0 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	fn approve_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `211`
		//  Estimated: `3554`
		// Minimum execution time: 8_756_000 picoseconds.
		Weight::from_parts(8_978_000, 3554)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	fn transfer_from_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `495`
		//  Estimated: `6118`
		// Minimum execution time: 19_417_000 picoseconds.
		Weight::from_parts(19_945_000, 6118)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `6118`
		// Minimum execution time: 21_425_000 picoseconds.
		Weight::from_parts(21_829_000, 6118)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `586`
		//  Estimated: `6118`
		// Minimum execution time: 23_854_000 picoseconds.
		Weight::from_parts(24_352_000, 6118)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:2 w:2)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:2)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `6118`
		// Minimum execution time: 23_775_000 picoseconds.
		Weight::from_parts(24_236_000, 6118)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokensBurnt (r:1 w:1)
	/// Proof: Refungible TokensBurnt (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn burn_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `3570`
		// Minimum execution time: 27_885_000 picoseconds.
		Weight::from_parts(28_492_000, 3570)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Common CollectionPropertyPermissions (r:1 w:1)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_property_permissions(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `314`
		//  Estimated: `20191`
		// Minimum execution time: 1_299_000 picoseconds.
		Weight::from_parts(1_410_000, 20191)
			// Standard Error: 14_247
			.saturating_add(Weight::from_parts(8_221_449, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `502 + b * (261 ±0)`
		//  Estimated: `36269`
		// Minimum execution time: 2_717_000 picoseconds.
		Weight::from_parts(6_076_231, 36269)
			// Standard Error: 10_349
			.saturating_add(Weight::from_parts(4_950_943, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn reset_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `317 + b * (261 ±0)`
		//  Estimated: `20191`
		// Minimum execution time: 936_000 picoseconds.
		Weight::from_parts(1_015_000, 20191)
			// Standard Error: 9_051
			.saturating_add(Weight::from_parts(5_454_224, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn delete_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `561 + b * (33291 ±0)`
		//  Estimated: `36269`
		// Minimum execution time: 2_707_000 picoseconds.
		Weight::from_parts(2_851_000, 36269)
			// Standard Error: 36_568
			.saturating_add(Weight::from_parts(23_557_445, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	fn repartition_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `288`
		//  Estimated: `3554`
		// Minimum execution time: 10_556_000 picoseconds.
		Weight::from_parts(10_904_000, 3554)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Refungible Balance (r:2 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	fn token_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `288`
		//  Estimated: `6118`
		// Minimum execution time: 4_708_000 picoseconds.
		Weight::from_parts(4_974_000, 6118)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Refungible CollectionAllowance (r:0 w:1)
	/// Proof: Refungible CollectionAllowance (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	fn set_allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_332_000 picoseconds.
		Weight::from_parts(4_506_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible CollectionAllowance (r:1 w:0)
	/// Proof: Refungible CollectionAllowance (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	fn allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3576`
		// Minimum execution time: 2_207_000 picoseconds.
		Weight::from_parts(2_358_000, 3576)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn repair_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `36269`
		// Minimum execution time: 2_230_000 picoseconds.
		Weight::from_parts(2_337_000, 36269)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn create_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3530`
		// Minimum execution time: 12_168_000 picoseconds.
		Weight::from_parts(12_531_000, 3530)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:200)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3530`
		// Minimum execution time: 2_583_000 picoseconds.
		Weight::from_parts(2_726_000, 3530)
			// Standard Error: 1_051
			.saturating_add(Weight::from_parts(4_727_433, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(b.into())))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:200 w:200)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:200)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3481 + b * (2540 ±0)`
		// Minimum execution time: 2_565_000 picoseconds.
		Weight::from_parts(2_710_000, 3481)
			// Standard Error: 862
			.saturating_add(Weight::from_parts(5_951_711, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:200 w:200)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex_multiple_owners(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3481 + b * (2540 ±0)`
		// Minimum execution time: 4_281_000 picoseconds.
		Weight::from_parts(3_252_037, 3481)
			// Standard Error: 568
			.saturating_add(Weight::from_parts(4_380_356, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: Refungible Balance (r:3 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn burn_item_partial() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `456`
		//  Estimated: `8682`
		// Minimum execution time: 22_354_000 picoseconds.
		Weight::from_parts(22_787_000, 8682)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokensBurnt (r:1 w:1)
	/// Proof: Refungible TokensBurnt (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn burn_item_fully() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `3554`
		// Minimum execution time: 21_689_000 picoseconds.
		Weight::from_parts(22_199_000, 3554)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	fn transfer_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `365`
		//  Estimated: `6118`
		// Minimum execution time: 13_673_000 picoseconds.
		Weight::from_parts(14_067_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `6118`
		// Minimum execution time: 15_863_000 picoseconds.
		Weight::from_parts(16_197_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `456`
		//  Estimated: `6118`
		// Minimum execution time: 18_123_000 picoseconds.
		Weight::from_parts(18_501_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:2 w:2)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:2)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `6118`
		// Minimum execution time: 17_966_000 picoseconds.
		Weight::from_parts(18_305_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible Balance (r:1 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible Allowance (r:0 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `223`
		//  Estimated: `3554`
		// Minimum execution time: 8_636_000 picoseconds.
		Weight::from_parts(8_882_000, 3554)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible Balance (r:1 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible Allowance (r:0 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	fn approve_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `211`
		//  Estimated: `3554`
		// Minimum execution time: 8_756_000 picoseconds.
		Weight::from_parts(8_978_000, 3554)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	fn transfer_from_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `495`
		//  Estimated: `6118`
		// Minimum execution time: 19_417_000 picoseconds.
		Weight::from_parts(19_945_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `6118`
		// Minimum execution time: 21_425_000 picoseconds.
		Weight::from_parts(21_829_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `586`
		//  Estimated: `6118`
		// Minimum execution time: 23_854_000 picoseconds.
		Weight::from_parts(24_352_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:2 w:2)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:2)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `6118`
		// Minimum execution time: 23_775_000 picoseconds.
		Weight::from_parts(24_236_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokensBurnt (r:1 w:1)
	/// Proof: Refungible TokensBurnt (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn burn_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `3570`
		// Minimum execution time: 27_885_000 picoseconds.
		Weight::from_parts(28_492_000, 3570)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Common CollectionPropertyPermissions (r:1 w:1)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_property_permissions(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `314`
		//  Estimated: `20191`
		// Minimum execution time: 1_299_000 picoseconds.
		Weight::from_parts(1_410_000, 20191)
			// Standard Error: 14_247
			.saturating_add(Weight::from_parts(8_221_449, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `502 + b * (261 ±0)`
		//  Estimated: `36269`
		// Minimum execution time: 2_717_000 picoseconds.
		Weight::from_parts(6_076_231, 36269)
			// Standard Error: 10_349
			.saturating_add(Weight::from_parts(4_950_943, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn reset_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `317 + b * (261 ±0)`
		//  Estimated: `20191`
		// Minimum execution time: 936_000 picoseconds.
		Weight::from_parts(1_015_000, 20191)
			// Standard Error: 9_051
			.saturating_add(Weight::from_parts(5_454_224, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn delete_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `561 + b * (33291 ±0)`
		//  Estimated: `36269`
		// Minimum execution time: 2_707_000 picoseconds.
		Weight::from_parts(2_851_000, 36269)
			// Standard Error: 36_568
			.saturating_add(Weight::from_parts(23_557_445, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	fn repartition_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `288`
		//  Estimated: `3554`
		// Minimum execution time: 10_556_000 picoseconds.
		Weight::from_parts(10_904_000, 3554)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Refungible Balance (r:2 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	fn token_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `288`
		//  Estimated: `6118`
		// Minimum execution time: 4_708_000 picoseconds.
		Weight::from_parts(4_974_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Refungible CollectionAllowance (r:0 w:1)
	/// Proof: Refungible CollectionAllowance (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	fn set_allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_332_000 picoseconds.
		Weight::from_parts(4_506_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible CollectionAllowance (r:1 w:0)
	/// Proof: Refungible CollectionAllowance (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	fn allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3576`
		// Minimum execution time: 2_207_000 picoseconds.
		Weight::from_parts(2_358_000, 3576)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn repair_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `36269`
		// Minimum execution time: 2_230_000 picoseconds.
		Weight::from_parts(2_337_000, 36269)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

