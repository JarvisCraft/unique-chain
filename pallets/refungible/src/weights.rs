// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_refungible
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-27, STEPS: `50`, REPEAT: `80`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bench-host`, CPU: `Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/unique-collator
// benchmark
// pallet
// --pallet
// pallet-refungible
// --wasm-execution
// compiled
// --extrinsic
// *
// --template=.maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/refungible/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_refungible.
pub trait WeightInfo {
	fn create_item() -> Weight;
	fn create_multiple_items(b: u32, ) -> Weight;
	fn create_multiple_items_ex_multiple_items(b: u32, ) -> Weight;
	fn create_multiple_items_ex_multiple_owners(b: u32, ) -> Weight;
	fn burn_item_partial() -> Weight;
	fn burn_item_fully() -> Weight;
	fn transfer_normal() -> Weight;
	fn transfer_creating() -> Weight;
	fn transfer_removing() -> Weight;
	fn transfer_creating_removing() -> Weight;
	fn approve() -> Weight;
	fn approve_from() -> Weight;
	fn transfer_from_normal() -> Weight;
	fn transfer_from_creating() -> Weight;
	fn transfer_from_removing() -> Weight;
	fn transfer_from_creating_removing() -> Weight;
	fn burn_from() -> Weight;
	fn set_token_property_permissions(b: u32, ) -> Weight;
	fn set_token_properties(b: u32, ) -> Weight;
	fn delete_token_properties(b: u32, ) -> Weight;
	fn repartition_item() -> Weight;
	fn token_owner() -> Weight;
	fn set_allowance_for_all() -> Weight;
	fn allowance_for_all() -> Weight;
	fn repair_item() -> Weight;
}

/// Weights for pallet_refungible using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn create_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `63471`
		// Minimum execution time: 25_330_000 picoseconds.
		Weight::from_parts(25_857_000, 63471)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:200 w:200)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:200)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `28192 + b * (35279 ±0)`
		// Minimum execution time: 3_885_000 picoseconds.
		Weight::from_parts(4_014_000, 28192)
			// Standard Error: 3_742
			.saturating_add(Weight::from_parts(8_955_551, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 35279).saturating_mul(b.into()))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:200 w:200)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:200 w:200)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:200)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `25652 + b * (37819 ±0)`
		// Minimum execution time: 3_927_000 picoseconds.
		Weight::from_parts(4_019_000, 25652)
			// Standard Error: 3_802
			.saturating_add(Weight::from_parts(10_508_107, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((5_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 37819).saturating_mul(b.into()))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:200 w:200)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex_multiple_owners(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `60931 + b * (2540 ±0)`
		// Minimum execution time: 14_382_000 picoseconds.
		Weight::from_parts(19_849_004, 60931)
			// Standard Error: 4_250
			.saturating_add(Weight::from_parts(5_646_313, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: Refungible Balance (r:3 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn burn_item_partial() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490`
		//  Estimated: `15717`
		// Minimum execution time: 29_436_000 picoseconds.
		Weight::from_parts(29_982_000, 15717)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokensBurnt (r:1 w:1)
	/// Proof: Refungible TokensBurnt (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn burn_item_fully() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375`
		//  Estimated: `14070`
		// Minimum execution time: 30_159_000 picoseconds.
		Weight::from_parts(30_615_000, 14070)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	fn transfer_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `398`
		//  Estimated: `9623`
		// Minimum execution time: 19_109_000 picoseconds.
		Weight::from_parts(19_443_000, 9623)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375`
		//  Estimated: `13153`
		// Minimum execution time: 22_289_000 picoseconds.
		Weight::from_parts(22_675_000, 13153)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490`
		//  Estimated: `13153`
		// Minimum execution time: 25_628_000 picoseconds.
		Weight::from_parts(25_961_000, 13153)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:2 w:2)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:2)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375`
		//  Estimated: `15693`
		// Minimum execution time: 25_212_000 picoseconds.
		Weight::from_parts(25_604_000, 15693)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible Balance (r:1 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible Allowance (r:0 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `256`
		//  Estimated: `3554`
		// Minimum execution time: 12_413_000 picoseconds.
		Weight::from_parts(12_655_000, 3554)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible Balance (r:1 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible Allowance (r:0 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	fn approve_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `3554`
		// Minimum execution time: 12_519_000 picoseconds.
		Weight::from_parts(12_872_000, 3554)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	fn transfer_from_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `13193`
		// Minimum execution time: 27_230_000 picoseconds.
		Weight::from_parts(27_830_000, 13193)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `16723`
		// Minimum execution time: 30_365_000 picoseconds.
		Weight::from_parts(30_905_000, 16723)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `620`
		//  Estimated: `16723`
		// Minimum execution time: 33_592_000 picoseconds.
		Weight::from_parts(34_187_000, 16723)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:2 w:2)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:2)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `19263`
		// Minimum execution time: 33_563_000 picoseconds.
		Weight::from_parts(34_157_000, 19263)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokensBurnt (r:1 w:1)
	/// Proof: Refungible TokensBurnt (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn burn_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `17640`
		// Minimum execution time: 39_718_000 picoseconds.
		Weight::from_parts(40_327_000, 17640)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Common CollectionPropertyPermissions (r:1 w:1)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_property_permissions(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `281`
		//  Estimated: `20191`
		// Minimum execution time: 2_305_000 picoseconds.
		Weight::from_parts(2_384_000, 20191)
			// Standard Error: 44_131
			.saturating_add(Weight::from_parts(12_131_171, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458 + b * (261 ±0)`
		//  Estimated: `56460`
		// Minimum execution time: 11_613_000 picoseconds.
		Weight::from_parts(2_574_143, 56460)
			// Standard Error: 59_918
			.saturating_add(Weight::from_parts(6_312_195, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn delete_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `463 + b * (33291 ±0)`
		//  Estimated: `56460`
		// Minimum execution time: 11_587_000 picoseconds.
		Weight::from_parts(11_764_000, 56460)
			// Standard Error: 84_727
			.saturating_add(Weight::from_parts(24_607_285, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	fn repartition_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `321`
		//  Estimated: `7059`
		// Minimum execution time: 14_272_000 picoseconds.
		Weight::from_parts(14_539_000, 7059)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Refungible Balance (r:2 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	fn token_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `321`
		//  Estimated: `6118`
		// Minimum execution time: 6_975_000 picoseconds.
		Weight::from_parts(7_175_000, 6118)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Refungible CollectionAllowance (r:0 w:1)
	/// Proof: Refungible CollectionAllowance (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	fn set_allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_540_000 picoseconds.
		Weight::from_parts(7_204_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible CollectionAllowance (r:1 w:0)
	/// Proof: Refungible CollectionAllowance (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	fn allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3576`
		// Minimum execution time: 3_130_000 picoseconds.
		Weight::from_parts(3_301_000, 3576)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn repair_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174`
		//  Estimated: `36269`
		// Minimum execution time: 4_463_000 picoseconds.
		Weight::from_parts(4_628_000, 36269)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn create_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `63471`
		// Minimum execution time: 25_330_000 picoseconds.
		Weight::from_parts(25_857_000, 63471)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:200 w:200)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:200)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `28192 + b * (35279 ±0)`
		// Minimum execution time: 3_885_000 picoseconds.
		Weight::from_parts(4_014_000, 28192)
			// Standard Error: 3_742
			.saturating_add(Weight::from_parts(8_955_551, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 35279).saturating_mul(b.into()))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:200 w:200)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:200 w:200)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:200)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex_multiple_items(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `25652 + b * (37819 ±0)`
		// Minimum execution time: 3_927_000 picoseconds.
		Weight::from_parts(4_019_000, 25652)
			// Standard Error: 3_802
			.saturating_add(Weight::from_parts(10_508_107, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((5_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 37819).saturating_mul(b.into()))
	}
	/// Storage: Refungible TokensMinted (r:1 w:1)
	/// Proof: Refungible TokensMinted (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:200 w:200)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:0 w:200)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:0 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:200)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 200]`.
	fn create_multiple_items_ex_multiple_owners(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `60931 + b * (2540 ±0)`
		// Minimum execution time: 14_382_000 picoseconds.
		Weight::from_parts(19_849_004, 60931)
			// Standard Error: 4_250
			.saturating_add(Weight::from_parts(5_646_313, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: Refungible Balance (r:3 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn burn_item_partial() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490`
		//  Estimated: `15717`
		// Minimum execution time: 29_436_000 picoseconds.
		Weight::from_parts(29_982_000, 15717)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokensBurnt (r:1 w:1)
	/// Proof: Refungible TokensBurnt (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn burn_item_fully() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375`
		//  Estimated: `14070`
		// Minimum execution time: 30_159_000 picoseconds.
		Weight::from_parts(30_615_000, 14070)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	fn transfer_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `398`
		//  Estimated: `9623`
		// Minimum execution time: 19_109_000 picoseconds.
		Weight::from_parts(19_443_000, 9623)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375`
		//  Estimated: `13153`
		// Minimum execution time: 22_289_000 picoseconds.
		Weight::from_parts(22_675_000, 13153)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490`
		//  Estimated: `13153`
		// Minimum execution time: 25_628_000 picoseconds.
		Weight::from_parts(25_961_000, 13153)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:2 w:2)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:2)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375`
		//  Estimated: `15693`
		// Minimum execution time: 25_212_000 picoseconds.
		Weight::from_parts(25_604_000, 15693)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Refungible Balance (r:1 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible Allowance (r:0 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `256`
		//  Estimated: `3554`
		// Minimum execution time: 12_413_000 picoseconds.
		Weight::from_parts(12_655_000, 3554)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible Balance (r:1 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible Allowance (r:0 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	fn approve_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `3554`
		// Minimum execution time: 12_519_000 picoseconds.
		Weight::from_parts(12_872_000, 3554)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	fn transfer_from_normal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `13193`
		// Minimum execution time: 27_230_000 picoseconds.
		Weight::from_parts(27_830_000, 13193)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `16723`
		// Minimum execution time: 30_365_000 picoseconds.
		Weight::from_parts(30_905_000, 16723)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `620`
		//  Estimated: `16723`
		// Minimum execution time: 33_592_000 picoseconds.
		Weight::from_parts(34_187_000, 16723)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:2 w:2)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:2 w:2)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:0)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:2)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn transfer_from_creating_removing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `19263`
		// Minimum execution time: 33_563_000 picoseconds.
		Weight::from_parts(34_157_000, 19263)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Refungible Allowance (r:1 w:1)
	/// Proof: Refungible Allowance (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible AccountBalance (r:1 w:1)
	/// Proof: Refungible AccountBalance (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Refungible TokensBurnt (r:1 w:1)
	/// Proof: Refungible TokensBurnt (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Refungible Owned (r:0 w:1)
	/// Proof: Refungible Owned (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: Refungible TokenProperties (r:0 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn burn_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `17640`
		// Minimum execution time: 39_718_000 picoseconds.
		Weight::from_parts(40_327_000, 17640)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Common CollectionPropertyPermissions (r:1 w:1)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_property_permissions(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `281`
		//  Estimated: `20191`
		// Minimum execution time: 2_305_000 picoseconds.
		Weight::from_parts(2_384_000, 20191)
			// Standard Error: 44_131
			.saturating_add(Weight::from_parts(12_131_171, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn set_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458 + b * (261 ±0)`
		//  Estimated: `56460`
		// Minimum execution time: 11_613_000 picoseconds.
		Weight::from_parts(2_574_143, 56460)
			// Standard Error: 59_918
			.saturating_add(Weight::from_parts(6_312_195, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	/// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	/// Proof: Common CollectionPropertyPermissions (max_values: None, max_size: Some(16726), added: 19201, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 64]`.
	fn delete_token_properties(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `463 + b * (33291 ±0)`
		//  Estimated: `56460`
		// Minimum execution time: 11_587_000 picoseconds.
		Weight::from_parts(11_764_000, 56460)
			// Standard Error: 84_727
			.saturating_add(Weight::from_parts(24_607_285, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible TotalSupply (r:1 w:1)
	/// Proof: Refungible TotalSupply (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Refungible Balance (r:1 w:1)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	fn repartition_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `321`
		//  Estimated: `7059`
		// Minimum execution time: 14_272_000 picoseconds.
		Weight::from_parts(14_539_000, 7059)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Refungible Balance (r:2 w:0)
	/// Proof: Refungible Balance (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	fn token_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `321`
		//  Estimated: `6118`
		// Minimum execution time: 6_975_000 picoseconds.
		Weight::from_parts(7_175_000, 6118)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Refungible CollectionAllowance (r:0 w:1)
	/// Proof: Refungible CollectionAllowance (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	fn set_allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_540_000 picoseconds.
		Weight::from_parts(7_204_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Refungible CollectionAllowance (r:1 w:0)
	/// Proof: Refungible CollectionAllowance (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	fn allowance_for_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3576`
		// Minimum execution time: 3_130_000 picoseconds.
		Weight::from_parts(3_301_000, 3576)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Refungible TokenProperties (r:1 w:1)
	/// Proof: Refungible TokenProperties (max_values: None, max_size: Some(32804), added: 35279, mode: MaxEncodedLen)
	fn repair_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174`
		//  Estimated: `36269`
		// Minimum execution time: 4_463_000 picoseconds.
		Weight::from_parts(4_628_000, 36269)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

